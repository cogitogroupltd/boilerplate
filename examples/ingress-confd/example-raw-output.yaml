# Generated using the below command
# $ cd helm-chart-boilerplate
# $ helm template myrelease ./charts/ingress-nginx --namespace ingress-nginx --values ./examples/ingress-confd/values-override.yaml --debug > output.yaml
---
# Source: ingress-nginx/templates/configmap-conf.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "myrelease-conf"
  namespace: "ingress-nginx"
data:
  ssh_password_file: |
    hello
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log debug;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        real_ip_header proxy_protocol;
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        proxy_set_header X-Real-IP       $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        log_format  main  '$proxy_protocol_addr $remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;
        
        ssl_password_file /etc/nginx/ssh_password_file ;
        
        sendfile        on;

        types_hash_max_size 2048;
        server_names_hash_bucket_size 256;
        tcp_nopush on;
        tcp_nodelay on;

        gzip on;

        
        keepalive_timeout  65;

        # Virtual host configs
        include /etc/nginx/conf.d/*.conf;

        # Removing Server Tags
        server_tokens off;

    }
  #/usr/share/nginx/html/custom_50x.html
  custom_50x.html: |
    <h1 style='color:red'>Error 500 502 503 504, something went wrong :-(</h1>
    <p>We seem to be having some technical difficulties. Please contact IT with this page.</p>
    <p>Sent from ingress-nginx/myrelease /usr/share/nginx/html/custom_50x.html</p>
  #/usr/share/nginx/html/custom_404x.html
  custom_404.html: |
    <h1 style='color:red'>Error 404: Not found :-(</h1>
    <p>I have no idea where that file is, sorry.  Are you sure you typed in the correct URL?</p>
    <p>Sent from K8s Helm Release ingress-nginx/myrelease.<br>config:/etc/nginx/conf.d/*.conf<br>file:/usr/share/nginx/html/custom_404.html</p>
  custom_403.html: |
    <html>
    <head><title>403 Forbidden</title></head>
    <body>
    <center><h1>403 Forbidden</h1></center>
    </body>
    </html>
---
# Source: ingress-nginx/templates/configmap-confd.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "myrelease-confd"
  namespace: "ingress-nginx"
data:
  healthz.conf: |
    server {
            listen  80 default_server;
            location /healthz {
               access_log off;
               return 200 "healthy\n";
            }
        
            # Redirect to https
            location / {
              return 301 https://$host$request_uri;
            }
        }

  hello.cogitogroup.co.uk.conf: |
    server {
        
        listen 443 ssl ; 
        listen [::]:443 ssl ;
        ssl_certificate /etc/nginx/certs/hello-cogitogroup-co-uk/tls.crt;
        ssl_certificate_key /etc/nginx/certs/hello-cogitogroup-co-uk/tls.key;
        
        server_name    hello.cogitogroup.co.uk:;
        root /var/www/html;
        
        
        
        
        some_server_block_property 10m

        
        

        client_max_body_size 100m;

        resolver                kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;
        resolver_timeout        5s;

        set $backend "http://hello.svc.cluster.local:80";

        location / {
            
            
            proxy_read_timeout      90;

            
            

            proxy_set_header Host $host;
            proxy_pass $backend;
            
            
            
            proxy_set_header Authorization ""; # stop nginx forwarding the basic auth header for nginx .htpasswd to grafana

            
            
        }
    }
  jenkins.cogitogroup.co.uk.conf: |
    server {
        
        listen 443 ssl ; 
        listen [::]:443 ssl ;
        ssl_certificate /etc/nginx/certs/jenkins-cogitogroup-co-uk/tls.crt;
        ssl_certificate_key /etc/nginx/certs/jenkins-cogitogroup-co-uk/tls.key;
        
        server_name    jenkins.cogitogroup.co.uk:;
        root /var/www/html;
        
        
        
        
        some_server_block_property 10m

        
        

        client_max_body_size 100m;

        resolver                kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;
        resolver_timeout        5s;

        set $backend "http://jenkins.svc.cluster.local:80";

        location / {
            
            
            proxy_read_timeout      90;

            
            

            proxy_set_header Host $host;
            proxy_pass $backend;
            
            
            
            proxy_set_header Authorization ""; # stop nginx forwarding the basic auth header for nginx .htpasswd to grafana

            
            
        }
    }

  sample.test.io.conf: |
    # sample routing
    server {

            
            listen 443 ssl ; 
            listen [::]:443 ssl ;
        
            ssl_certificate /etc/nginx/certs/sample.test.io/tls.crt;
            ssl_certificate_key /etc/nginx/certs/sample.test.io/tls.key;
            
            root /var/www/html;
            
            
            
            server_name 127.0.0.1 sample.test.io localhost;

            # Add custom pages for errors
            error_page 404 /custom_404.html;
            location = /custom_404.html {
              root /usr/share/nginx/html;
            }

            error_page 403 /custom_403.html;
            location = /custom_403.html {
              root /usr/share/nginx/html;
            }

            error_page 500 502 503 504 /custom_50x.html;
            location = /custom_50x.html {
                    root /usr/share/nginx/html;
            }

            location / {
                    # This resolver is required to identify a DNS lookup 
                    resolver                kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;
                    resolver_timeout        5s;
                    port_in_redirect        off;
                    proxy_set_header        Host $host;
                    proxy_set_header        X-Real-IP $remote_addr;
                    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header        X-Forwarded-Proto $scheme;
                    proxy_read_timeout      90;
                    
                    proxy_http_version      1.1;
                    proxy_set_header        Upgrade $http_upgrade;
                    proxy_set_header        Connection "upgrade"; 
                    set_real_ip_from        10.244.0.0/16;
                    real_ip_recursive       on;
                    # This variable is required to force a DNS lookup using resolver
                    set $backend            "http://sample.default.svc.cluster.local:80"; # FQDN format: $service_name.$namespace.svc.cluster.local
                    proxy_pass $backend;
            }
    }

  mysite.cogitogroup.co.uk.conf: |-
    server {              
      listen 80 ;
      listen [::]:80 ;
    
      root /var/www/html;
    
      server_name localhost;
      location / {
        root /usr/share/nginx/html;
       }
    }
---
# Source: ingress-nginx/templates/service-extra.yaml
apiVersion: v1
kind: Service
metadata:
  
  name: myrelease-mysql
  
  namespace: ingress-nginx
spec:
  
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
---
# Source: ingress-nginx/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  
  name: myrelease-http
  
  namespace: ingress-nginx
spec:
  
  ports:
    - name: http
      port: 80
      targetPort: 80
---
# Source: ingress-nginx/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  
  name: myrelease-https
  
  namespace: ingress-nginx
spec:
  
  ports:
    - name: https
      port: 443
      targetPort: 443
---
# Source: ingress-nginx/templates/daemonSet.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: myrelease
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx 
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        checksum/confd: 2b555a8395c3f32d0c15d3236fd0bc5a221359c6a55ea255e3745ee5ec3c9e8
        checksum/conf: 03bd69449cdae838a196a6bc8816039ceab9ae0e85dd7bd3b0acbd4bc612f70 
    spec:
      terminationGracePeriodSeconds: 600
      containers:
      - image: "nginx:1.22.0"
        imagePullPolicy: 
        name: myrelease
        ports:
        - containerPort: 80
          name: http
          
          hostPort: 80
        - containerPort: 443
          name: https
          
          hostPort: 443
        - containerPort: 3306
          name: mysql
          
          hostPort: 3306
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - mountPath: "/etc/nginx/ssh_password_file"
            subPath: "ssh_password_file"
            name: conf
          - mountPath: "/etc/nginx/certs/sample.test.io"
            name: sample-test-io
          - mountPath: "/etc/nginx/certs/hello-cogitogroup-co-uk"
            name: hello-cogitogroup-co-uk
          - mountPath: "/etc/nginx/certs/jenkins-cogitogroup-co-uk"
            name: jenkins-cogitogroup-co-uk
          - mountPath: "/etc/nginx/conf.d/"
            name: confd
          - mountPath: "/etc/nginx/nginx.conf"
            subPath: "nginx.conf"
            name: conf
          - mountPath: "/usr/share/nginx/html/custom_50x.html"
            subPath: "custom_50x.html"
            name: conf
          - mountPath: "/usr/share/nginx/html/custom_403.html"
            subPath: "custom_403.html"
            name: conf
          - mountPath: "/usr/share/nginx/html/custom_404.html"
            subPath: "custom_404.html"
            name: conf
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 5; nginx -c /etc/nginx/nginx.conf -s quit;"]
        
        livenessProbe:
          null
        readinessProbe:
          null
        startupProbe:
          null
      volumes:
        - name: sample-test-io
          secret:
            defaultMode: 420
            secretName: "myrelease-certs"
        - secret: 
            defaultMode: 420
            secretName: "hello-cogitogroup-co-uk"
          name: hello-cogitogroup-co-uk
        - secret: 
            defaultMode: 420
            secretName: "jenkins-cogitogroup-co-uk"
          name: jenkins-cogitogroup-co-uk
        - name: conf
          configMap: 
            name: "myrelease-conf"
            defaultMode: 0777
        - name: confd
          configMap: 
            name: "myrelease-confd"
            defaultMode: 0777
