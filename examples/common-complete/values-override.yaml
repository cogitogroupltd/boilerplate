# See ../../charts/common/values.yaml for full list of features

replicaCount: 2

autoscaling:
  enabled: true
  targetCPUUtilizationPercentage: 80


image:
  registry: 1234.dkr.ecr.us-east-1.amazonaws.com
  repository: nginx
  tag: "latest"
  pullPolicy: "IfNotPresent"

imagePullSecrets:
  - name: regcred


initContainers:
  - name: init
    image: bitnami/aws-cli:latest
    imagePullPolicy: IfNotPresent
    command: ["/bin/bash", "-xc" ]
    args: 
      - |
        TIME=$(date +'%Y-%m-%d-%H-%M-%s')
        echo "$TIME Starting S3 file download" | tee --append /app/logs/nginx-service-initContainer-s3-copy.log
        aws s3 cp s3://${AWS_S3_BUCKET_NAME}/*.png /app/data/ | tee --append /app/logs/nginx-service-initContainer-s3-copy.log
    securityContext:
      privileged: true
      runAsUser: 0
    env:
      - name: "AWS_ACCESS_KEY_ID"
        value: "AKIAXICWYKJXEW464WPK"
      - name: "AWS_SECRET_ACCESS_KEY"
        value: "OVERRIDE_ME"
      - name: "AWS_S3_BUCKET_NAME"
        value: "somebucket"
    volumeMounts:
      - mountPath: /app/logs/
        name: log-dir
      - mountPath: /app/data/
        name: data-dir
      - mountPath: /app/rabbitmq_logs
        name: rabbitmq-logs

hook:
  enabled: true
  image:
    repository: "my/helm-db-tools"
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.0"
  env:
    DB_PASSWORD: blab
    DB_USERNAME: dev
    DB_SERVER: mssql.dns.name
    DB_NAME: devdb
  args: ["source /scripts/create-user-and-database.sh"]
  files:
    create-user-and-database.sh: |
      #!/bin/bash

      # Example script which will run prior to the main helm chart deploys. 
      # See .Values.hooks

      # Uncomment and populate these values to run locally
      # export DB_NAME=devdb
      # export DB_SERVER=mssql.dns.name
      # export DB_USERNAME=dev
      # export DB_PASSWORD=blab

      export SCRIPTS=/scripts
      cp $SCRIPTS/* $HOME/

      sed -i -e "s/@DATABASE_NAME@/$DB_NAME/g" $HOME/create-user-and-database.sql

      echo "Execution SQL script ..."
      /opt/mssql-tools/bin/sqlcmd -S "$DB_SERVER" -U $DB_USERNAME -P $DB_PASSWORD -i $HOME/create-user-and-database.sql -o result.txt

      cat result.txt

    create-user-and-database.sql: |
      /********************************************************************************************************/
      /* Set the values for your application in this section                          */
      /********************************************************************************************************/

      use [@DATABASE_NAME@]

      CREATE TABLE hello 



deploymentLabels:
  branch: develop

env:
  RABBIT_HOST: rabbitmq.broker.svc.cluster.local
  RABBIT_USER: rabbit
  TOPIC_NAME: "test"

secenv:
  RABBIT_PASSWD: NadmapyefHybIdviGlyilguvminorcAu

extraVolumeMounts:
  - name: rabbitmq-logs
    mountPath: /app/rabbitmq_logs
  - name: log-dir
    mountPath: /app/logs/
  - name: data-dir
    mountPath: /app/data/
  - name: myrelease-cm-nginx-conf
    mountPath: /etc/nginx/nginx.conf
extraVolumes:
  - name: rabbitmq-logs
    persistentVolumeClaim:
      claimName: nginx-service-pvc
  - name: log-dir
    persistentVolumeClaim:
      claimName: nginx-service-logs-pvc
  - name: data-dir
    emptyDir: {}
  - name: myrelease-cm-nginx-conf
    configMap:
      name: myrelease-cm-nginx-conf

configMap:
  enabled: true
  name: myrelease-cm-nginx-conf #myrelease-app-nginx-conf
  files: 
    nginx.conf: |
      user  nginx;
      worker_processes  1;

      error_log  /var/log/nginx/error.log warn;
      pid        /var/run/nginx.pid;


      events {
          worker_connections  1024;
      }


      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /var/log/nginx/access.log  main;

          keepalive_timeout  65;

          gzip  on;

          include /etc/nginx/conf.d/*.conf;
      }

services:
  - name: "http"
    type: NodePort
    nodePort: 30081
    containerPort: 80
  - name: "https"
    type: NodePort
    nodePort: 30444
    containerPort: 443

persistence:
  enabled: true
  pvcs:
  - name: nginx-service-logs-pvc
    storageClassName: local-path
    accessMode: ReadWriteMany
    size: 25Gi
  - name: nginx-service-pvc
    storageClassName: local-path
    accessMode: ReadWriteMany
    size: 26Gi
    

  persistentVolumes:
  - name: nginx-service-logs
    size: 25Gi
    volumeMode: Filesystem
    accessMode: ReadWriteMany
    claimRef: nginx-service-logs-pvc
    persistentVolumeReclaimPolicy: Retain
    storageClassName: local-path
    localPath: /mnt/logs
    nodeAffinityRules:
      nodeAffinity:
        required:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
  - name: nginx-service-pv
    size: 26Gi
    volumeMode: Filesystem
    accessMode: ReadWriteMany
    claimRef: nginx-service-pvc
    persistentVolumeReclaimPolicy: Retain
    storageClassName: local-path
    localPath: /mnt/rabbitmq_logs 
    nodeAffinityRules:
      nodeAffinity:
        required:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    
readinessCheck:
  readinessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3
livenessCheck:
  livenessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
startupCheck:
  startupProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 3

filesFromSecret:
  rds-combined-ca-bundle-pem:
    secret: rds-combined-ca-bundle
    mountPath: /app/certs


externalsecret:
  enabled: true
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
    helm.sh/resource-policy: keep
  records:
    AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
    AWS_LOG_GROUP_NAME: AWS_LOG_GROUP_NAME
    AWS_REGION: AWS_REGION
    AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
  refreshInterval: 5m
  remote_secret_name: dev/backend/secret
  secretStoreName: dev-aws-secretsmanager
  secretStoreType: ClusterSecretStore
  targetSecretName: backend
  templateEngineVersion: v2



ingress:
  enabled: true
  annotations: 
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"


  defaultBackend: 
    service: 
      name: "default-backend-service"
      port: 80

  rules:
    - host: "some.cogitogroup.co.uk"
      http:
        paths:
          - path: "/"
            pathType: "Prefix"
            backend:
              service:
                name: "website-app-http"
                port: 8080
    - host: "other.cogitogroup.co.uk"
      http:
        paths:
          - path: "/"
            pathType: "Prefix"
            backend:
              service:
                name: "website-app-http"
                port: 8080
