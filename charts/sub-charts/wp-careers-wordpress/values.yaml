# Default values for wp-careers-wordpress.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
type: deployment
# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  name: wordpress
  repository: docker.io/bitnami/wordpress
  # Overrides the image tag whose default is the chart appVersion.
  tag: "6.3.1-debian-11-r32"
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  envVars:
    standard:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: ALLOW_EMPTY_PASSWORD
        value: "yes"
      - name: MARIADB_HOST
        value: miacademy-wp-careers-mariadb
      - name: MARIADB_PORT_NUMBER
        value: "3306"
      - name: WORDPRESS_DATABASE_NAME
        value: bitnami_wordpress
      - name: WORDPRESS_DATABASE_USER
        value: bn_wordpress
      - name: WORDPRESS_USERNAME
        value: user
      - name: WORDPRESS_EMAIL
        value: user@example.com
      - name: WORDPRESS_FIRST_NAME
        value: FirstName
      - name: WORDPRESS_LAST_NAME
        value: LastName
      - name: WORDPRESS_HTACCESS_OVERRIDE_NONE
        value: "no"
      - name: WORDPRESS_ENABLE_HTACCESS_PERSISTENCE
        value: "no"
      - name: WORDPRESS_BLOG_NAME
        value: User's Blog!
      - name: WORDPRESS_SKIP_BOOTSTRAP
        value: "no"
      - name: WORDPRESS_TABLE_PREFIX
        value: wp_
      - name: WORDPRESS_SCHEME
        value: http
      - name: WORDPRESS_EXTRA_WP_CONFIG_CONTENT
        value: ""
      - name: WORDPRESS_PLUGINS
        value: none
      - name: APACHE_HTTP_PORT_NUMBER
        value: "8080"
      - name: APACHE_HTTPS_PORT_NUMBER
        value: "8443"
    fromSecret:
      - name: WORDPRESS_DATABASE_PASSWORD
        secret:
          name: miacademy-wp-careers-mariadb
          key: mariadb-password
      - name: WORDPRESS_PASSWORD
        secret:
          name: wp-careers-wordpress
          key: wordpress-password
  volumeMounts:
    - mountPath: /bitnami/wordpress
      name: wordpress-data
      subPath: wordpress
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 300m
      memory: 512Mi
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
    - containerPort: 8443
      name: https
      protocol: TCP
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /wp-admin/install.php
      port: http
      scheme: HTTP
    initialDelaySeconds: 120
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    httpGet:
      path: /wp-login.php
      port: http
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: "wp-careers-wordpress"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  runAsUser: 0  
  runAsNonRoot: false

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  name: "http"
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  protocol: "TCP"
  targetPort: "http"
  additionalPorts:
    - portName: https
      port: 443
      protocol: TCP
      targetPort: https

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: wordpress-data
    persistentVolumeClaim:
      claimName: wp-careers-wordpress

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: wp-careers
              app.kubernetes.io/name: wordpress
          topologyKey: kubernetes.io/hostname
        weight: 1

pvcs:
  wordpress:
    accessModes:
      ReadWriteOnce
    size: "10Gi"
    storageClassName: "standard-rwo"