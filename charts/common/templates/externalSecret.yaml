{{- if .Values.externalsecret.enabled }}
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: "{{ .Release.Namespace }}-externalsecret"
  namespace: {{ .Release.Namespace }}
  {{- with .Values.externalsecret.annotations }}
  annotations:
    {{- toYaml . | nindent 4  }}
  {{- end }}
spec:
  refreshInterval: {{ .Values.externalsecret.refreshInterval }}
  ## dict of the secretstore
  secretStoreRef:
  ## dict of the secret to be created
    name: {{ .Values.externalsecret.secretStoreName }}
    kind: {{ .Values.externalsecret.secretStoreType }}
  target:
    name: {{ .Values.externalsecret.targetSecretName }}
    creationPolicy: Owner      
    template:
      metadata:
        {{- with .Values.externalsecret.annotations }}
        annotations:
          {{- toYaml . | nindent 10  }}
        {{- end }}
      engineVersion: {{ .Values.externalsecret.templateEngineVersion }}
      data:
  {{- range $name, $value := .Values.externalsecret.records }}
  {{- if contains "yaml" ($value)  }}
  #Hardcoded application_yaml rather than using $value 
  #since we need to escape the of go functions to be used during creation of externalSecret
    {{ $name | nindent 8 }}: '{{` {{.application_yaml | replace "\\n" "\n" | toYaml}} `}}' 
  {{ else }}
    {{ $name | nindent 8 }}: "{{ printf "%s %s%s %s" "{{" "." $value "}}" }}"
  {{- end }}
  {{- end }}
  dataFrom:                    
  - extract:                   
      key: {{  .Values.externalsecret.remote_secret_name }}
{{- end }}                   
