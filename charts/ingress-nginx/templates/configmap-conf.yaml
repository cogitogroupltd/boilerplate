
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Release.Name }}-conf"
  namespace: "{{ .Release.Namespace }}"
data:
  ssh_password_file: >
    hello
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log debug;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }
    {{- if .Values.streams }}
    {{- range $key, $value := .Values.streams }}
    {{ $value | indent 4 }}
    {{ "" | indent 0 }}
    {{- end -}}
    {{- end -}}

    http {
        {{ if eq .Values.LoadBalancerType "proxy_protocol" }}
        real_ip_header proxy_protocol;
        {{ end }}
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        proxy_set_header X-Real-IP       $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        log_format  main  '$proxy_protocol_addr $remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;
        {{ if .Values.ssl.enabled }}
        ssl_password_file /etc/nginx/ssh_password_file ;
        {{ end }}
        sendfile        on;

        types_hash_max_size 2048;
        server_names_hash_bucket_size 256;
        tcp_nopush on;
        tcp_nodelay on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        # security, reveal less information about ourselves
        server_tokens off; # disables emitting nginx version in error messages and in the “Server” response header field
        more_clear_headers 'Server';
        more_clear_headers 'X-Powered-By';

        # prevent clickjacking attacks
        more_set_headers 'X-Frame-Options: SAMEORIGIN';

        # help to prevent cross-site scripting exploits
        more_set_headers 'X-XSS-Protection: 1; mode=block';

        # help to prevent Cross-Site Scripting (XSS) and data injection attacks
        # https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
        more_set_headers "Content-Security-Policy: object-src 'none'; frame-ancestors 'self'; form-action 'self'; block-all-mixed-content; sandbox allow-forms allow-same-origin allow-scripts allow-popups allow-downloads; base-uri 'self';";

        # enable response compression
        gzip  on;
        brotli on;
        brotli_static on;
        

        # Virtual host configs
        include /etc/nginx/conf.d/*.conf;

        # Removing Server Tags


    }
  #/usr/share/nginx/html/custom_50x.html
  custom_50x.html: |
    <h1 style='color:red'>Error 500 502 503 504, something went wrong :-(</h1>
    <p>We seem to be having some technical difficulties. Please contact IT with this page.</p>
    <p>Sent from {{ .Release.Namespace }}/{{ .Release.Name }} /usr/share/nginx/html/custom_50x.html</p>
  #/usr/share/nginx/html/custom_404x.html
  custom_404.html: |
    <h1 style='color:red'>Error 404: Not found :-(</h1>
    <p>I have no idea where that file is, sorry.  Are you sure you typed in the correct URL?</p>
    <p>Sent from K8s Helm Release {{ .Release.Namespace }}/{{ .Release.Name }}.<br>config:/etc/nginx/conf.d/*.conf<br>file:/usr/share/nginx/html/custom_404.html</p>
  custom_403.html: |
    <html>
    <head><title>403 Forbidden</title></head>
    <body>
    <center><h1>403 Forbidden</h1></center>
    </body>
    </html>